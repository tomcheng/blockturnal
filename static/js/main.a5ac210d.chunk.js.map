{"version":3,"sources":["constants.js","camera.js","rotations.js","projections.js","addUnit.js","figure.js","measurements.js","shapes.js","screen.js","screenManager.js","game.js","touch.js","index.js","keyboard.js","utils.js","registerServiceWorker.js"],"names":["MATERIAL","T","color","TRANSPARENT_MATERIAL","transparent","opacity","LOSER_MATERIAL","INITIAL_FIGURE","Camera","_this","this","Object","classCallCheck","getCamera","camera","setOffset","offset","setDistance","distance","togglePosition","side","update","desiredX","orientation","desiredY","translateZ","position","z","translateX","x","translateY","y","setSize","width","height","aspect","updateProjectionMatrix","setViewOffset","PerspectiveCamera","lookAt","Vector3","QUARTER_TURN","Math","PI","r","Matrix4","TURN_LEFT","Quaternion","TURN_RIGHT","TURN_UP","TURN_DOWN","TURN_COUNTER_CLOCKWISE","TURN_CLOCKWISE","setFromRotationMatrix","makeRotationY","makeRotationX","makeRotationZ","MAPPINGS","c","Vector2","getProjection","_ref","axis","coordinates","uniqWith","map","isEqual","getRandomProjection","flipOrNot","angle","random","flip","rotation","normalize","projection","xMin","yMin","forEach","sortBy","axisToIndex","addUnit","direction","column","axesToGet","filter","a","columnCoordinates","newUnit","setComponent","max","min","push","unit","BoxBufferGeometry","mesh","Group","desiredRotation","unitCoordinates","concat","cubes","Figure","rotate","premultiply","_rotate","getCurrentProjection","rotatedCoordinates","clone","applyQuaternion","round","_getRandomProjection","addBlocks","length","addRandomUnit","_generateCubesAndMesh","turnRed","cube","material","reset","slerp","quaternion","remove","_getDimensions","cubeCoordinates","xMax","yMax","zMin","zMax","coor","depth","getDimensions","Mesh","set","add","maxDimension","setFromEuler","Euler","getOutline","vertices","hasCoordinates","some","getRight","currentDirection","currentPosition","getStraight","turnRight","goStraight","turnLeft","start","getStart","vertex","xOffset","yOffset","center","extrudeSettings","bevelEnabled","Screen","isZooming","shape","Shape","ExtrudeGeometry","moveTo","zoom","setNewHole","p","outline","hole","Path","holes","geometry","checkFit","figureProjection","p1","p2","normalP1","normalP2","every","i","equals","isEquivalent","isAtFigure","isPastFigure","isOffCamera","ScreenManager","screens","currentIndex","currentScreen","previousScreen","stopped","screen","getScreens","stop","setNextScreen","Game","onUpdateScore","onEndGame","animate","requestId","requestAnimationFrame","screenManager","figure","cancelAnimationFrame","finalScore","score","updateCameraPosition","renderer","render","scene","getDomElement","domElement","isRunning","resize","rotateFigure","toggleCamera","gammaInput","gammeOutput","background","fog","light","s","touchEl","document","getElementById","initial","rotations","touchStartTime","tapMovementThresholdPast","startScreenEl","startButtonEl","endScreenEl","finalScoreEl","highScoreEl","restartButtonEl","scoreEl","highScore","localStorage","getItem","gamePlayed","game","window","innerWidth","innerHeight","innerText","setItem","style","display","className","startGame","restartGame","addEventListener","debounce","getGameRunning","getGamePlayed","evt","includes","code","preventDefault","initializeKeyboard","DocumentTouch","touches","clientX","clientY","Date","getTime","current","dx","dy","sqrt","distanceBetween","previousRotations","initializeTouch","body","appendChild","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.a5ac210d.chunk.js","sourcesContent":["import * as T from \"three\";\n\nexport const UNIT_SIZE = 60;\n\nexport const INITIAL_SCREEN_DISTANCE = 10000;\nexport const INITIAL_CAMERA_DISTANCE = 500;\nexport const CAMERA_POSITION_DECAY = 0.3;\n\nexport const ROTATION_DECAY = 0.4;\n\nexport const SCREEN_WIDTH = 40 * UNIT_SIZE;\nexport const SCREEN_HEIGHT = 30 * UNIT_SIZE;\nexport const MATERIAL = new T.MeshLambertMaterial({\n  color: 0x78aede\n});\nexport const TRANSPARENT_MATERIAL = new T.MeshLambertMaterial({\n  color: 0x78aede,\n  transparent: true,\n  opacity: 0.4\n});\nexport const LOSER_MATERIAL = new T.MeshLambertMaterial({\n  color: 0xff0000,\n});\n\nexport const INITIAL_RATE = 12;\nexport const ZOOM_RATE = 400;\n\nexport const INITIAL_FIGURE = [\n  new T.Vector3(0, 0, 0),\n  new T.Vector3(0, 0, 1),\n  new T.Vector3(0, 1, 0),\n  new T.Vector3(0, 1, 1),\n  new T.Vector3(1, 0, 0),\n  new T.Vector3(1, 0, 1),\n  new T.Vector3(1, 1, 0),\n  new T.Vector3(1, 1, 1)\n];\n","import { PerspectiveCamera, Vector3 } from \"three\";\nimport {\n  INITIAL_SCREEN_DISTANCE,\n  CAMERA_POSITION_DECAY,\n  INITIAL_CAMERA_DISTANCE,\n} from \"./constants\";\n\nclass Camera {\n  constructor() {\n    this.side = \"left\";\n    this.orientation = null;\n    this.distance = INITIAL_CAMERA_DISTANCE;\n    this.camera = new PerspectiveCamera(\n      75,\n      1,\n      1,\n      INITIAL_SCREEN_DISTANCE + this.distance + 10\n    );\n\n    this.camera.lookAt(new Vector3(0, 0, -INITIAL_SCREEN_DISTANCE));\n  }\n\n  getCamera = () => this.camera;\n\n  setOffset = offset => {\n    this.offset = offset;\n  };\n\n  setDistance = distance => {\n    this.distance = distance;\n  };\n\n  togglePosition = () => {\n    this.side = this.side === \"left\" ? \"right\" : \"left\";\n  };\n\n  update = () => {\n    const desiredX = this.orientation === \"landscape\"\n      ? this.side === \"left\" ? -this.offset : this.offset\n      : 0;\n    const desiredY = this.orientation === \"landscape\" ? 0.5 * this.offset : this.offset;\n    this.camera.translateZ(CAMERA_POSITION_DECAY * (this.distance - this.camera.position.z));\n    this.camera.translateX(CAMERA_POSITION_DECAY * (desiredX - this.camera.position.x));\n    this.camera.translateY(CAMERA_POSITION_DECAY * (desiredY - this.camera.position.y));\n  };\n\n  setSize = (width, height) => {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.orientation = height > width ? \"portrait\" : \"landscape\";\n    if (this.orientation === \"portrait\") {\n      this.camera.setViewOffset(width, height, 0, 0.2 * height, width, height);\n    } else {\n      this.camera.setViewOffset(width, height, 0, 0, width, height);\n    }\n  };\n}\n\nexport default Camera;\n","import { Matrix4, Quaternion } from \"three\";\n\nconst QUARTER_TURN = 0.5 * Math.PI;\nconst r = new Matrix4();\nconst TURN_LEFT = new Quaternion();\nconst TURN_RIGHT = new Quaternion();\nconst TURN_UP = new Quaternion();\nconst TURN_DOWN = new Quaternion();\nconst TURN_COUNTER_CLOCKWISE = new Quaternion();\nconst TURN_CLOCKWISE = new Quaternion();\nTURN_LEFT.setFromRotationMatrix(r.makeRotationY(-QUARTER_TURN));\nTURN_RIGHT.setFromRotationMatrix(r.makeRotationY(QUARTER_TURN));\nTURN_UP.setFromRotationMatrix(r.makeRotationX(-QUARTER_TURN));\nTURN_DOWN.setFromRotationMatrix(r.makeRotationX(QUARTER_TURN));\nTURN_COUNTER_CLOCKWISE.setFromRotationMatrix(r.makeRotationZ(QUARTER_TURN));\nTURN_CLOCKWISE.setFromRotationMatrix(r.makeRotationZ(-QUARTER_TURN));\n\nexport const rotate = (direction, rotation) => {\n  switch (direction) {\n    case \"left\":\n      rotation.premultiply(TURN_LEFT);\n      break;\n    case \"right\":\n      rotation.premultiply(TURN_RIGHT);\n      break;\n    case \"up\":\n      rotation.premultiply(TURN_UP);\n      break;\n    case \"down\":\n      rotation.premultiply(TURN_DOWN);\n      break;\n    case \"counter-clockwise\":\n      rotation.premultiply(TURN_COUNTER_CLOCKWISE);\n      break;\n    case \"clockwise\":\n      rotation.premultiply(TURN_CLOCKWISE);\n      break;\n    default:\n      break;\n  }\n};\n","import { Vector2 } from \"three\";\nimport uniqWith from \"lodash/uniqWith\";\nimport isEqual from \"lodash/isEqual\";\nimport random from \"lodash/random\";\nimport sortBy from \"lodash/sortBy\";\n\nconst MAPPINGS = {\n  x: c => new Vector2(c.y, c.z),\n  y: c => new Vector2(c.x, c.z),\n  z: c => new Vector2(c.x, c.y)\n};\n\nconst flipProjection = flipOrNot => coordinates =>\n  flipOrNot ? coordinates.map(c => new Vector2(-c.x, c.y)) : coordinates;\n\nconst rotateProjection = angle => coordinates => {\n  switch (angle) {\n    case 90:\n      return coordinates.map(c => new Vector2(-c.y, c.x));\n    case 180:\n      return coordinates.map(c => new Vector2(-c.x, -c.y));\n    case 270:\n      return coordinates.map(c => new Vector2(c.y, -c.x));\n    default:\n      return coordinates;\n  }\n};\n\nexport const getProjection = ({ axis, coordinates }) =>\n  uniqWith(coordinates.map(MAPPINGS[axis]), isEqual);\n\nexport const getRandomProjection = coordinates => {\n  const axis = [\"x\", \"y\", \"z\"][random(0, 2)];\n  const flip = random(0, 1) === 1;\n  const rotation = [0, 90, 180, 270][random(0, 3)];\n\n  return rotateProjection(rotation)(\n    flipProjection(flip)(getProjection({ axis, coordinates }))\n  );\n};\n\nconst normalize = projection => {\n  let xMin = null, yMin = null;\n\n  projection.forEach(c => {\n    if (xMin === null || c.x < xMin) {\n      xMin = c.x;\n    }\n    if (yMin === null || c.y < yMin) {\n      yMin = c.y;\n    }\n  });\n\n  return sortBy(projection.map(c => new Vector2(c.x - xMin, c.y - yMin)), [\n    \"x\",\n    \"y\"\n  ]);\n};\n\nexport const isEquivalent = (p1, p2) => {\n  if (p1.length !== p2.length) {\n    return false;\n  }\n\n  const normalP1 = normalize(p1);\n  const normalP2 = normalize(p2);\n\n  return normalP1.every((c, i) => c.equals(normalP2[i]));\n};\n","import { Vector3 } from \"three\";\nimport random from \"lodash/random\";\nimport max from \"lodash/max\";\nimport min from \"lodash/min\";\nimport { getProjection } from \"./projections\";\n\nexport const addRandomUnit = coordinates => {\n  const axis = [\"x\", \"y\", \"z\"][random(0, 2)];\n  const direction = [\"positive\", \"negative\"][random(0, 1)];\n  const projection = getProjection({ axis, coordinates });\n  const column = projection[random(0, projection.length - 1)];\n\n  addUnit({ coordinates, axis, direction, column });\n};\n\nconst axisToIndex = {\n  x: 0,\n  y: 1,\n  z: 2\n};\n\nexport const addUnit = ({ coordinates, axis, direction, column }) => {\n  const axesToGet = [\"x\", \"y\", \"z\"].filter(a => a !== axis);\n  const columnCoordinates = coordinates\n    .filter(c => c[axesToGet[0]] === column.x && c[axesToGet[1]] === column.y)\n    .map(c => c[axis]);\n\n  const newUnit = new Vector3();\n  newUnit.setComponent(\n    axisToIndex[axis],\n    direction === \"positive\"\n      ? max(columnCoordinates) + 1\n      : min(columnCoordinates) - 1\n  );\n  newUnit.setComponent(axisToIndex[axesToGet[0]], column.x);\n  newUnit.setComponent(axisToIndex[axesToGet[1]], column.y);\n\n  coordinates.push(newUnit);\n};\n","import { Group, Quaternion, Euler, Mesh, BoxBufferGeometry } from \"three\";\nimport max from \"lodash/max\";\nimport {\n  UNIT_SIZE,\n  MATERIAL,\n  LOSER_MATERIAL,\n  ROTATION_DECAY,\n  INITIAL_FIGURE\n} from \"./constants\";\nimport { rotate as _rotate } from \"./rotations\";\nimport { getDimensions } from \"./measurements\";\nimport { getProjection, getRandomProjection as _getRandomProjection } from \"./projections\";\nimport { addRandomUnit } from \"./addUnit\";\n\nconst unit = new BoxBufferGeometry(UNIT_SIZE, UNIT_SIZE, UNIT_SIZE);\nconst mesh = new Group();\nconst desiredRotation = new Quaternion();\nlet unitCoordinates = [].concat(INITIAL_FIGURE);\nlet cubes = [];\n\nclass Figure {\n  constructor() {\n    desiredRotation.setFromEuler(new Euler(0, 0, 0));\n\n    this._generateCubesAndMesh();\n\n    this.mesh = mesh;\n  }\n\n  rotate = direction => {\n    _rotate(direction, desiredRotation);\n  };\n\n  getCurrentProjection = () => {\n    const rotatedCoordinates = unitCoordinates.map(c =>\n      c.clone().applyQuaternion(desiredRotation).round()\n    );\n    return getProjection({ axis: \"z\", coordinates: rotatedCoordinates });\n  };\n\n  getRandomProjection = () => _getRandomProjection(unitCoordinates);\n\n  addBlocks = () => {\n    addRandomUnit(unitCoordinates);\n    this._generateCubesAndMesh();\n  };\n\n  turnRed = () => {\n    cubes.forEach(cube => {\n      cube.material = LOSER_MATERIAL;\n    });\n  };\n\n  reset = () => {\n    unitCoordinates = [].concat(INITIAL_FIGURE);\n    this._generateCubesAndMesh();\n  };\n\n  update = () => {\n    Quaternion.slerp(\n      mesh.quaternion,\n      desiredRotation,\n      mesh.quaternion,\n      ROTATION_DECAY\n    );\n  };\n\n  _generateCubesAndMesh = () => {\n    cubes.forEach(cube => {\n      mesh.remove(cube);\n    });\n\n    const { width, height, depth, x, y, z } = getDimensions(unitCoordinates);\n\n    cubes = unitCoordinates.map(c => {\n      const cube = new Mesh(unit, MATERIAL);\n      cube.position.set(c.x * UNIT_SIZE, c.y * UNIT_SIZE, c.z * UNIT_SIZE);\n      cube.translateX(-0.5 * width - x);\n      cube.translateY(-0.5 * height - y);\n      cube.translateZ(-0.5 * depth - z);\n      return cube;\n    });\n\n    cubes.forEach(cube => {\n      mesh.add(cube);\n    });\n\n    this.maxDimension = max([width, height, depth]);\n  };\n}\n\nexport default Figure;\n","import { UNIT_SIZE } from \"./constants\";\n\nexport const getDimensions = cubeCoordinates => {\n  let xMin = null,\n    xMax = null,\n    yMin = null,\n    yMax = null,\n    zMin = null,\n    zMax = null;\n\n  cubeCoordinates.forEach(coor => {\n    if (xMin === null || coor.x < xMin) {\n      xMin = coor.x;\n    }\n    if (yMin === null || coor.y < yMin) {\n      yMin = coor.y;\n    }\n    if (zMin === null || coor.z < zMin) {\n      zMin = coor.z;\n    }\n    if (xMax === null || coor.x > xMax) {\n      xMax = coor.x;\n    }\n    if (yMax === null || coor.y > yMax) {\n      yMax = coor.y;\n    }\n    if (zMax === null || coor.z > zMax) {\n      zMax = coor.z;\n    }\n  });\n\n  return {\n    width: (xMax - xMin + 1) * UNIT_SIZE,\n    height: (yMax - yMin + 1) * UNIT_SIZE,\n    depth: (zMax - zMin + 1) * UNIT_SIZE,\n    x: xMin * UNIT_SIZE - 0.5 * UNIT_SIZE,\n    y: yMin * UNIT_SIZE - 0.5 * UNIT_SIZE,\n    z: zMin * UNIT_SIZE - 0.5 * UNIT_SIZE\n  };\n};\n","import { Vector2 } from \"three\";\nimport { UNIT_SIZE } from \"./constants\";\n\nconst center = vertices => {\n  let xMin = null, xMax = null, yMin = null, yMax = null;\n\n  vertices.forEach(vertex => {\n    if (xMin === null || vertex.x < xMin) {\n      xMin = vertex.x;\n    }\n    if (yMin === null || vertex.y < yMin) {\n      yMin = vertex.y;\n    }\n    if (xMax === null || vertex.x > xMax) {\n      xMax = vertex.x;\n    }\n    if (yMax === null || vertex.y > yMax) {\n      yMax = vertex.y;\n    }\n  });\n\n  const xOffset = -xMin - 0.5 * (xMax - xMin);\n  const yOffset = -yMin - 0.5 * (yMax - yMin);\n\n  return vertices.map(\n    vertex => new Vector2(vertex.x + xOffset, vertex.y + yOffset)\n  );\n};\n\nexport const getOutline = coordinates => {\n  const vertices = [];\n\n  const hasCoordinates = coor =>\n    coordinates.some(c => c.x === coor.x && c.y === coor.y);\n\n  const getRight = () => {\n    switch (currentDirection) {\n      case \"right\":\n        return new Vector2(currentPosition.x + 1, currentPosition.y - 1);\n      case \"up\":\n        return new Vector2(currentPosition.x + 1, currentPosition.y + 1);\n      case \"left\":\n        return new Vector2(currentPosition.x - 1, currentPosition.y + 1);\n      case \"down\":\n        return new Vector2(currentPosition.x - 1, currentPosition.y - 1);\n      default:\n        break;\n    }\n  };\n\n  const getStraight = () => {\n    switch (currentDirection) {\n      case \"right\":\n        return new Vector2(currentPosition.x + 1, currentPosition.y);\n      case \"up\":\n        return new Vector2(currentPosition.x, currentPosition.y + 1);\n      case \"left\":\n        return new Vector2(currentPosition.x - 1, currentPosition.y);\n      case \"down\":\n        return new Vector2(currentPosition.x, currentPosition.y - 1);\n      default:\n        break;\n    }\n  };\n\n  const turnRight = () => {\n    switch (currentDirection) {\n      case \"right\":\n        vertices.push(\n          new Vector2(\n            (currentPosition.x + 1) * UNIT_SIZE,\n            currentPosition.y * UNIT_SIZE\n          )\n        );\n        currentPosition = getRight();\n        currentDirection = \"down\";\n        break;\n      case \"up\":\n        vertices.push(\n          new Vector2(\n            (currentPosition.x + 1) * UNIT_SIZE,\n            (currentPosition.y + 1) * UNIT_SIZE\n          )\n        );\n        currentPosition = getRight();\n        currentDirection = \"right\";\n        break;\n      case \"left\":\n        vertices.push(\n          new Vector2(\n            currentPosition.x * UNIT_SIZE,\n            (currentPosition.y + 1) * UNIT_SIZE\n          )\n        );\n        currentPosition = getRight();\n        currentDirection = \"up\";\n        break;\n      case \"down\":\n        vertices.push(\n          new Vector2(\n            currentPosition.x * UNIT_SIZE,\n            currentPosition.y * UNIT_SIZE\n          )\n        );\n        currentPosition = getRight();\n        currentDirection = \"left\";\n        break;\n      default:\n        break;\n    }\n  };\n\n  const goStraight = () => {\n    switch (currentDirection) {\n      case \"right\":\n        currentPosition = getStraight();\n        break;\n      case \"up\":\n        currentPosition = getStraight();\n        break;\n      case \"left\":\n        currentPosition = getStraight();\n        break;\n      case \"down\":\n        currentPosition = getStraight();\n        break;\n      default:\n        break;\n    }\n  };\n\n  const turnLeft = () => {\n    switch (currentDirection) {\n      case \"right\":\n        vertices.push(\n          new Vector2(\n            (currentPosition.x + 1) * UNIT_SIZE,\n            currentPosition.y * UNIT_SIZE\n          )\n        );\n        currentDirection = \"up\";\n        break;\n      case \"up\":\n        vertices.push(\n          new Vector2(\n            (currentPosition.x + 1) * UNIT_SIZE,\n            (currentPosition.y + 1) * UNIT_SIZE\n          )\n        );\n        currentDirection = \"left\";\n        break;\n      case \"left\":\n        vertices.push(\n          new Vector2(\n            currentPosition.x * UNIT_SIZE,\n            (currentPosition.y + 1) * UNIT_SIZE\n          )\n        );\n        currentDirection = \"down\";\n        break;\n      case \"down\":\n        vertices.push(\n          new Vector2(\n            currentPosition.x * UNIT_SIZE,\n            currentPosition.y * UNIT_SIZE\n          )\n        );\n        currentDirection = \"right\";\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getStart = () => {\n    let start = null;\n\n    coordinates.forEach(c => {\n      if (!start) {\n        start = c;\n        return;\n      }\n\n      if (c.y < start.y) {\n        start = c;\n        return;\n      }\n\n      if (c.y === start.y && c.x < start.x) {\n        start = c;\n      }\n    });\n\n    return start;\n  };\n\n  const start = getStart();\n  let currentPosition = start;\n  let currentDirection = \"right\";\n\n  vertices.push(new Vector2(start.x * UNIT_SIZE, start.y * UNIT_SIZE));\n\n  do {\n    if (hasCoordinates(getRight())) {\n      turnRight();\n    } else if (hasCoordinates(getStraight())) {\n      goStraight();\n    } else {\n      turnLeft();\n    }\n  } while (\n    currentPosition.x !== start.x ||\n    currentPosition.y !== start.y ||\n    currentDirection !== \"down\"\n  );\n\n  return center(vertices);\n};\n","import { Shape, Path, ExtrudeGeometry, Mesh, Vector2 } from \"three\";\nimport {\n  SCREEN_WIDTH,\n  SCREEN_HEIGHT,\n  MATERIAL,\n  TRANSPARENT_MATERIAL,\n  INITIAL_RATE,\n  ZOOM_RATE,\n  INITIAL_CAMERA_DISTANCE\n} from \"./constants\";\nimport { getOutline } from \"./shapes\";\nimport { isEquivalent } from \"./projections\";\n\nconst extrudeSettings = { depth: 1, bevelEnabled: false };\n\nclass Screen {\n  constructor() {\n    let projection;\n    let isZooming = false;\n    const shape = new Shape([\n      new Vector2(-0.5 * SCREEN_WIDTH, 0.5 * SCREEN_HEIGHT),\n      new Vector2(-0.5 * SCREEN_WIDTH, -0.5 * SCREEN_HEIGHT),\n      new Vector2(0.5 * SCREEN_WIDTH, -0.5 * SCREEN_HEIGHT),\n      new Vector2(0.5 * SCREEN_WIDTH, 0.5 * SCREEN_HEIGHT)\n    ]);\n    const mesh = new Mesh(\n      new ExtrudeGeometry(shape, extrudeSettings),\n      MATERIAL\n    );\n\n    this.mesh = mesh;\n\n    this.moveTo = distance => {\n      mesh.position.set(0, 0, distance);\n      if (mesh.position.z < 0) {\n        mesh.material = MATERIAL;\n      }\n    };\n\n    this.zoom = () => {\n      isZooming = true;\n    };\n\n    this.setNewHole = p => {\n      isZooming = false;\n      projection = p;\n      const outline = getOutline(projection);\n      const hole = new Path(outline);\n      shape.holes = [hole];\n      mesh.geometry = new ExtrudeGeometry(shape, extrudeSettings);\n    };\n\n    this.checkFit = figureProjection =>\n      isEquivalent(figureProjection, projection);\n\n    this.isAtFigure = () =>\n      isZooming\n        ? mesh.position.z + ZOOM_RATE >= 0\n        : mesh.position.z + INITIAL_RATE >= 0;\n\n    this.isPastFigure = () => mesh.position.z > 0;\n\n    this.isOffCamera = () => mesh.position.z > INITIAL_CAMERA_DISTANCE;\n\n    this.update = () => {\n      if (mesh.position.z >= 0) {\n        isZooming = false;\n        mesh.material = TRANSPARENT_MATERIAL;\n        mesh.material.opacity = 1 - (mesh.position.z / INITIAL_CAMERA_DISTANCE);\n      }\n\n      if (isZooming) {\n        if (mesh.position.z + ZOOM_RATE > 0) {\n          mesh.translateZ(Math.max(INITIAL_RATE, -mesh.position.z));\n        } else {\n          mesh.translateZ(ZOOM_RATE);\n        }\n      } else {\n        mesh.translateZ(INITIAL_RATE);\n      }\n    };\n  }\n}\n\nexport default Screen;\n","import Screen from \"./screen\";\nimport { INITIAL_SCREEN_DISTANCE } from \"./constants\";\n\nclass ScreenManager {\n  constructor() {\n    const screens = [new Screen(), new Screen()];\n    let currentIndex = 0;\n    let currentScreen = screens[currentIndex];\n    let previousScreen = null;\n    let stopped = false;\n\n    screens.forEach(screen => {\n      screen.moveTo(-10 * INITIAL_SCREEN_DISTANCE);\n    });\n\n    currentScreen.moveTo(-INITIAL_SCREEN_DISTANCE);\n\n    this.getScreens = () => screens;\n\n    this.zoom = () => {\n      currentScreen.zoom();\n    };\n\n    this.stop = () => {\n      stopped = true;\n    };\n\n    this.setNextScreen = projection => {\n      previousScreen = currentScreen;\n      currentIndex = (currentIndex + 1) % screens.length;\n      currentScreen = screens[currentIndex];\n      currentScreen.setNewHole(projection);\n      currentScreen.moveTo(-INITIAL_SCREEN_DISTANCE);\n    };\n\n    this.setNewHole = projection => {\n      currentScreen.setNewHole(projection);\n    };\n\n    this.checkFit = projection => currentScreen.checkFit(projection);\n\n    this.isAtFigure = () => currentScreen.isAtFigure();\n\n    this.isPastFigure = () => currentScreen.isPastFigure();\n\n    this.reset = () => {\n      screens.forEach(screen => {\n        screen.moveTo(-10 * INITIAL_SCREEN_DISTANCE);\n      });\n      currentScreen.moveTo(-INITIAL_SCREEN_DISTANCE);\n      stopped = false;\n    };\n\n    this.update = () => {\n      if (stopped) {\n        return;\n      }\n\n      currentScreen.update();\n\n      if (previousScreen) {\n        previousScreen.update();\n\n        if (previousScreen.isOffCamera()) {\n          previousScreen = null;\n        }\n      }\n    };\n  }\n}\n\nexport default ScreenManager;\n","import * as T from \"three\";\nimport { INITIAL_SCREEN_DISTANCE } from \"./constants\";\nimport Camera from \"./camera\";\nimport Figure from \"./figure\";\nimport ScreenManager from \"./screenManager\";\n\nclass Game {\n  constructor({ width, height, onUpdateScore, onEndGame }) {\n    this.onUpdateScore = onUpdateScore;\n    this.onEndGame = onEndGame;\n\n    this.requestId = null;\n    this.score = 0;\n\n    this.figure = new Figure();\n    this.camera = new Camera();\n    this.scene = new T.Scene();\n    this.renderer = new T.WebGLRenderer();\n    this.screenManager = new ScreenManager();\n\n    this.onUpdateScore(0);\n\n    this.camera.setSize(width, height);\n    this.updateCameraPosition();\n\n    this.renderer.gammaInput = true;\n    this.renderer.gammeOutput = true;\n    this.renderer.setSize(width, height);\n\n    this.scene.background = new T.Color(0x8bd9f2);\n    this.scene.fog = new T.Fog(0x8bd9f2, 1, 1.5 * INITIAL_SCREEN_DISTANCE);\n\n    this.scene.add(new T.AmbientLight(0x404040));\n\n    const light = new T.DirectionalLight();\n    light.position.set(-3, 5, 7);\n    this.scene.add(light);\n\n    this.scene.add(this.figure.mesh);\n\n    this.screenManager.setNewHole(this.figure.getRandomProjection());\n    this.screenManager.getScreens().forEach(s => {\n      this.scene.add(s.mesh);\n    });\n  }\n\n  animate = () => {\n    this.requestId = requestAnimationFrame(this.animate);\n\n    if (\n      this.screenManager.isAtFigure() &&\n      !this.screenManager.checkFit(this.figure.getCurrentProjection())\n    ) {\n      this.figure.turnRed();\n      this.screenManager.stop();\n      cancelAnimationFrame(this.requestId);\n      this.requestId = null;\n      this.onEndGame({ finalScore: this.score });\n    }\n\n    if (this.screenManager.isPastFigure()) {\n      this.score += 1;\n      this.onUpdateScore(this.score);\n      this.figure.addBlocks();\n      this.updateCameraPosition();\n      this.screenManager.setNextScreen(this.figure.getRandomProjection());\n    }\n\n    this.figure.update();\n    this.camera.update();\n    this.screenManager.update();\n    this.renderer.render(this.scene, this.camera.getCamera());\n  };\n\n  getDomElement = () => this.renderer.domElement;\n\n  isRunning = () => !!this.requestId;\n\n  reset = () => {\n    this.score = 0;\n    this.onUpdateScore(this.score);\n\n    this.figure.reset();\n    this.screenManager.reset();\n    this.screenManager.setNewHole(this.figure.getRandomProjection());\n    this.updateCameraPosition();\n    this.animate();\n  };\n\n  updateCameraPosition = () => {\n    this.camera.setDistance(500 + 0.5 * this.figure.maxDimension);\n    this.camera.setOffset(90 + 0.5 * this.figure.maxDimension);\n  };\n\n  start = () => {\n    this.animate();\n  };\n\n  resize = (width, height) => {\n    this.camera.setSize(width, height);\n    this.renderer.setSize(width, height);\n  };\n\n  rotateFigure = direction => {\n    this.figure.rotate(direction);\n  };\n\n  toggleCamera = () => {\n    this.camera.togglePosition();\n  };\n\n  zoom = () => {\n    this.screenManager.zoom();\n  };\n}\n\nexport default Game;\n","import clone from \"lodash/clone\";\n\nconst touchEl = document.getElementById(\"touch\");\n\nconst UNIT = 60;\nconst TAP_TIME_THRESHOLD = 300;\nconst TAP_MOVEMENT_THRESHOLD = 9;\n\nlet initial = null;\nlet rotations = null;\nlet touchStartTime = null;\nlet tapMovementThresholdPast = false;\n\nconst distanceBetween = (p1, p2) => {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\nexport const initializeTouch = ({ zoom, rotateFigure }) => {\n  touchEl.style.display = \"block\";\n\n  touchEl.addEventListener(\"touchstart\", evt => {\n    evt.preventDefault();\n\n    initial = { x: evt.touches[0].clientX, y: evt.touches[0].clientY };\n    rotations = { x: 0, y: 0 };\n    touchStartTime = new Date().getTime();\n    tapMovementThresholdPast = false;\n  });\n\n  touchEl.addEventListener(\"touchmove\", evt => {\n    evt.preventDefault();\n\n    const current = { x: evt.touches[0].clientX, y: evt.touches[0].clientY };\n\n    if (\n      !tapMovementThresholdPast &&\n      distanceBetween(initial, current) > TAP_MOVEMENT_THRESHOLD\n    ) {\n      tapMovementThresholdPast = true;\n    }\n\n    const previousRotations = clone(rotations);\n\n    rotations.x = Math.round((current.x - initial.x) / UNIT);\n    rotations.y = Math.round((current.y - initial.y) / UNIT);\n\n    if (rotations.x > previousRotations.x) {\n      rotateFigure(\"right\");\n    } else if (rotations.x < previousRotations.x) {\n      rotateFigure(\"left\");\n    }\n\n    if (rotations.y > previousRotations.y) {\n      rotateFigure(\"down\");\n    } else if (rotations.y < previousRotations.y) {\n      rotateFigure(\"up\");\n    }\n  });\n\n  touchEl.addEventListener(\"touchend\", evt => {\n    evt.preventDefault();\n\n    const time = new Date().getTime();\n\n    if (\n      time - touchStartTime < TAP_TIME_THRESHOLD &&\n      !tapMovementThresholdPast\n    ) {\n      zoom();\n    }\n  });\n};\n","import registerServiceWorker from \"./registerServiceWorker\";\nimport Game from \"./game\";\nimport debounce from \"lodash/debounce\";\nimport { deviceHasTouch } from \"./utils\";\nimport { initializeKeyboard } from \"./keyboard\";\nimport { initializeTouch } from \"./touch\";\nimport \"./styles/reset.css\";\nimport \"./styles/styles.css\";\n\nconst startScreenEl = document.getElementById(\"start-screen\");\nconst startButtonEl = document.getElementById(\"start-button\");\nconst endScreenEl = document.getElementById(\"end-screen\");\nconst finalScoreEl = document.getElementById(\"final-score\");\nconst highScoreEl = document.getElementById(\"high-score\");\nconst restartButtonEl = document.getElementById(\"restart-button\");\nconst scoreEl = document.getElementById(\"score\");\n\nlet highScore = localStorage.getItem(\"high-score\") || 0;\nlet gamePlayed = false;\n\nconst handleUpdateScore = score => {\n  scoreEl.innerText = score;\n};\n\nconst handleEndGame = ({ finalScore }) => {\n  if (finalScore > highScore) {\n    highScore = finalScore;\n    localStorage.setItem(\"high-score\", highScore);\n  }\n  finalScoreEl.innerText = finalScore;\n  highScoreEl.innerText = highScore;\n  endScreenEl.style.display = \"block\";\n  endScreenEl.className = \"inactive\";\n  requestAnimationFrame(() => {\n    endScreenEl.className = \"active\";\n  });\n};\n\nconst game = new Game({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  onUpdateScore: handleUpdateScore,\n  onEndGame: handleEndGame\n});\n\nconst startGame = () => {\n  startScreenEl.style.display = \"none\";\n  game.start();\n  gamePlayed = true;\n};\n\nconst restartGame = () => {\n  endScreenEl.style.display = \"none\";\n  game.reset();\n};\n\nstartButtonEl.addEventListener(\"click\", startGame);\nrestartButtonEl.addEventListener(\"click\", restartGame);\n\nwindow.addEventListener(\n  \"resize\",\n  debounce(() => {\n    game.resize(window.innerWidth, window.innerHeight);\n  }, 300)\n);\n\ninitializeKeyboard({\n  rotateFigure: game.rotateFigure,\n  zoom: game.zoom,\n  toggleCamera: game.toggleCamera,\n  getGameRunning: game.isRunning,\n  getGamePlayed: () => gamePlayed,\n  startGame,\n  restartGame\n});\n\nif (deviceHasTouch()) {\n  initializeTouch({\n    rotateFigure: game.rotateFigure,\n    zoom: game.zoom\n  });\n}\n\ndocument.body.appendChild(game.getDomElement());\nregisterServiceWorker();\n","export const initializeKeyboard = ({\n  getGameRunning,\n  getGamePlayed,\n  rotateFigure,\n  toggleCamera,\n  zoom,\n  startGame,\n  restartGame\n}) => {\n  window.addEventListener(\"keydown\", evt => {\n    if ([\"ArrowDown\", \"ArrowUp\", \"Space\", \"Tab\"].includes(evt.code)) {\n      evt.preventDefault();\n    }\n\n    if (getGameRunning()) {\n      switch (evt.code) {\n        case \"ArrowDown\":\n          rotateFigure(\"down\");\n          break;\n        case \"ArrowUp\":\n          rotateFigure(\"up\");\n          break;\n        case \"ArrowLeft\":\n          rotateFigure(\"left\");\n          break;\n        case \"ArrowRight\":\n          rotateFigure(\"right\");\n          break;\n        case \"BracketLeft\":\n          rotateFigure(\"counter-clockwise\");\n          break;\n        case \"BracketRight\":\n          rotateFigure(\"clockwise\");\n          break;\n        case \"KeyQ\":\n        case \"Tab\":\n          toggleCamera();\n          break;\n        case \"Space\":\n          zoom();\n          break;\n        default:\n          break;\n      }\n    } else {\n      if (evt.code === \"Space\") {\n        if (getGamePlayed()) {\n          restartGame();\n        } else {\n          startGame();\n        }\n      }\n    }\n  });\n};\n\n","export const deviceHasTouch = () =>\n  \"ontouchstart\" in window ||\n  (window.DocumentTouch && document instanceof window.DocumentTouch);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", () => {\n      const swUrl = `https://blockturnal.com/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === \"installed\") {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log(\"New content is available; please refresh.\");\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log(\"Content is cached for offline use.\");\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error(\"Error during service worker registration:\", error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}